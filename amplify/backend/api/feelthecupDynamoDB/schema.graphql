# type Task
#   @model
#   @auth(
#     rules: [
#       { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#       { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#     ]
#   ) {
#   id: ID!
#   title: String!
#   description: String
#   status: String
# }
# type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#   id: ID!
#   content: String!
# }

type User @model @auth(rules: [{ allow: owner }]) {
	id: ID!
	sub: String!
	name: String!
	surname: String!
	email: String!
	mobileNumber: String!
	birthdate: AWSDate!
	cup_balance: Int!
	credits: Float!
	loyaltyBalance: Int
	noOfCupsLost: Int
	address: Address
	stores: [ID]
	deposits: [Deposit]
	friends: [ID]
}

type Deposit {
	amount: Float!
	payedAt: AWSDateTime!
	store: ID
}

type Store @model @auth(rules: [{ allow: owner }]) {
	id: ID!
	uid: ID!
	phone: String!
	email: String!
	cupsDefault: Int!
	cupsRemaining: Int!
	address: Address!
	tin: Int!
	active: Boolean!
	contracts: [Contract]
}

type Address {
	country: String!
	city: String!
	municipality: String!
	latitude: Float!
	longitude: Float!
	street: String!
	number: String!
	postalCode: Int!
}

type Contract {
	id: ID!
	store: ID!
	plan: Plan!
	invoice: Invoice!
	signedAt: AWSDateTime!
	startingAt: AWSDateTime!
	expiringAt: AWSDateTime!
}

type Plan {
	rewards: Boolean
	noOfCups: Int!
	charge: Float!
}

type Invoice {
	amount: Float!
	generatedAt: AWSDateTime!
	payedAt: AWSDateTime!
	cancelled: Boolean!
}

type Transaction @model @auth(rules: [{ allow: owner }]) {
	id: ID!
	user: ID!
	status: TransactionStatus!
	rewards: [Reward]
	receivedFrom: ID
	receivedAt: AWSDateTime
	returnedTo: ID
	returnedAt: AWSDateTime
}

enum TransactionStatus {
	RECEIVED
	RETURNED
	LOST
}

type Reward {
	points: Int!
	type: RewardType!
}

enum RewardType {
	ON_TIME_RETURN
	SUGGESTED_LOCATION_RETURN
}
