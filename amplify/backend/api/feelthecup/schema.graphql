type User
	@model(
		queries: { get: "getUser", list: "listUsers" },
		mutations: {create: "createUser", update:"updateUser"}
	)
	@auth(
		rules: [
			{ allow: owner, ownerField: "owner", operations: [create, read, update] },
			{ allow: groups, groups: ["store"], queries: [get], mutations: [update] },
			{ allow: groups, groups: ["FORBIDDEN"], operations: [delete] }
		]
	) {
	id: ID
	sub: String @auth(rules: [
		{ allow: owner, operations: [read] },
		{ allow: groups, groups: ["store"], operations: [read] }
		{ allow: groups, groups: ["FORBIDDEN"], operations: [update] }
	])
	name: String @auth(rules: [
		{ allow: owner, operations: [read] },
		{ allow: groups, groups: ["store"], operations: [read] }
		{ allow: groups, groups: ["FORBIDDEN"], operations: [update] }
	])
	surname: String @auth(rules: [
		{ allow: owner, operations: [read] },
		{ allow: groups, groups: ["store"], operations: [read] }
		{ allow: groups, groups: ["FORBIDDEN"], operations: [update] }
	])
	email: String @auth(rules: [
		{ allow: owner, operations: [read] }
		{ allow: groups, groups: ["FORBIDDEN"], operations: [update] }
	])
	mobileNumber: String @auth(rules: [
		{ allow: owner, operations: [read] }
		{ allow: groups, groups: ["FORBIDDEN"], operations: [update] }
	])
	birthdate: AWSDate @auth(rules: [
		{ allow: owner, operations: [read] }
		{ allow: groups, groups: ["FORBIDDEN"], operations: [update] }
	])
	cup_balance: Int @auth(rules: [
		{ allow: owner, operations: [read] },
#		{ allow: groups, groups: ["store"], operations: [read, update] }
	])
	credits: Float @auth(rules: [
		{ allow: owner, operations: [read] }
	])
	loyaltyBalance: Int @auth(rules: [
		{ allow: owner, operations: [read] }
	])
	noOfCupsUsed: Int @auth(rules: [
		{ allow: owner, operations: [read] },
#		{ allow: groups, groups: ["store"], operations: [read, update] }
	])
	noOfCupsLost: Int @auth(rules: [
		{ allow: owner, operations: [read] },
#		{ allow: groups, groups: ["store"], operations: [read, update] }
	])
	pointsUsed: Int @auth(rules: [
		{ allow: owner, operations: [read] }
	])
	noOfRewards: Int @auth(rules: [
		{ allow: owner, operations: [read] }
	])
	cupsPerWeek: Float @auth(rules: [
		{ allow: owner, operations: [read] }
	])
	hoursPerCup: Float @auth(rules: [
		{ allow: owner, operations: [read] }
	])
	address: Address
#	@auth(rules: [
#		{ allow: owner }
#	])
	profilePicture: S3Object
#	@auth(rules: [
#		{ allow: owner },
#		{ allow: groups, groups: ["store"], operations: [read] }
#	])
	preferences: AWSJSON @auth(rules: [
		{ allow: owner }
	])
	stores: [ID] @auth(rules: [
		{ allow: owner }
	])
	deposits: [Deposit] @auth(rules: [
		{ allow: owner }
	])
	friends: [ID] @auth(rules: [
		{ allow: owner }
	])
	owner: String @auth(rules: [
		{ allow: owner, operations: [read] }
	])
}

type S3Object {
	level: String
	filePath: String
	filename: String
	contentType: String
}

type Deposit {
	amount: Float
	payedAt: AWSDateTime
	store: ID
}

type Store
	@model(
		queries: { get: "getStore", list: "listStores" },
		mutations: { create: "createStore", update: "updateStore" }
	)
	@auth(
		rules: [
			{ allow: owner, ownerField: "owner", operations: [create, read, update] }
			{ allow: private, operations: [read] }
			{ allow: groups, groups: ["FORBIDDEN"], operations: [delete] }
		]
	) {
	id: ID
	uid: ID
	phone: String
	email: String
	cupsDefault: Int
	cupsRemaining: Int
	address: Address
	tin: Int
	active: Boolean
	contracts: [Contract]
	logo: S3Object
	preferences: AWSJSON
	owner: String @auth(rules: [{ allow: owner, operations: [read] }])
}

type Address {
	country: String
	city: String
	municipality: String
	latitude: Float
	longitude: Float
	street: String
	number: String
	postalCode: Int
}

type Contract {
	id: ID
	store: ID
	plan: Plan
	invoice: Invoice
	signedAt: AWSDateTime
	startingAt: AWSDateTime
	expiringAt: AWSDateTime
}

type Plan {
	rewards: Boolean
	noOfCups: Int
	charge: Float
}

type Invoice {
	amount: Float
	generatedAt: AWSDateTime
	payedAt: AWSDateTime
	cancelled: Boolean
}

type Transaction
	@model(
		queries: { get: "getTransaction", list: "listTransactions" }
		mutations: { create: "createTransaction", update: "updateTransaction" }
	)
	@auth(
		rules: [
			{ allow: owner, ownerField: "owner", operations: [create, read, update] }
			{ allow: owner, ownerField: "user", operations: [read] }
			{ allow: groups, groups: ["FORBIDDEN"], operations: [delete] }
		]
	) {
	id: ID
	user: ID
	status: TransactionStatus
	rewards: [Reward]
	receivedFrom: ID
	receivedAt: AWSDateTime
	returnedTo: ID
	returnedAt: AWSDateTime
	owner: String
}

enum TransactionStatus {
	RECEIVED
	RETURNED
	LOST
}

type Reward {
	points: Int
	type: RewardType
}

enum RewardType {
	ON_TIME_RETURN
	SUGGESTED_LOCATION_RETURN
}
